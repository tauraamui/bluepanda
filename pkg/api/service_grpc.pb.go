// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: service.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	BluePanda_NextRowID_FullMethodName = "/bluepanda.BluePanda/NextRowID"
	BluePanda_Store_FullMethodName     = "/bluepanda.BluePanda/Store"
	BluePanda_Get_FullMethodName       = "/bluepanda.BluePanda/Get"
	BluePanda_Fetch_FullMethodName     = "/bluepanda.BluePanda/Fetch"
	BluePanda_Insert_FullMethodName    = "/bluepanda.BluePanda/Insert"
)

// BluePandaClient is the client API for BluePanda service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BluePandaClient interface {
	NextRowID(ctx context.Context, in *NextRowIDRequest, opts ...grpc.CallOption) (*NextRowIDResult, error)
	Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResult, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error)
	Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (BluePanda_FetchClient, error)
	Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResult, error)
}

type bluePandaClient struct {
	cc grpc.ClientConnInterface
}

func NewBluePandaClient(cc grpc.ClientConnInterface) BluePandaClient {
	return &bluePandaClient{cc}
}

func (c *bluePandaClient) NextRowID(ctx context.Context, in *NextRowIDRequest, opts ...grpc.CallOption) (*NextRowIDResult, error) {
	out := new(NextRowIDResult)
	err := c.cc.Invoke(ctx, BluePanda_NextRowID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluePandaClient) Store(ctx context.Context, in *StoreRequest, opts ...grpc.CallOption) (*StoreResult, error) {
	out := new(StoreResult)
	err := c.cc.Invoke(ctx, BluePanda_Store_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluePandaClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResult, error) {
	out := new(GetResult)
	err := c.cc.Invoke(ctx, BluePanda_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bluePandaClient) Fetch(ctx context.Context, in *FetchRequest, opts ...grpc.CallOption) (BluePanda_FetchClient, error) {
	stream, err := c.cc.NewStream(ctx, &BluePanda_ServiceDesc.Streams[0], BluePanda_Fetch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &bluePandaFetchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BluePanda_FetchClient interface {
	Recv() (*FetchResult, error)
	grpc.ClientStream
}

type bluePandaFetchClient struct {
	grpc.ClientStream
}

func (x *bluePandaFetchClient) Recv() (*FetchResult, error) {
	m := new(FetchResult)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bluePandaClient) Insert(ctx context.Context, in *InsertRequest, opts ...grpc.CallOption) (*InsertResult, error) {
	out := new(InsertResult)
	err := c.cc.Invoke(ctx, BluePanda_Insert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BluePandaServer is the server API for BluePanda service.
// All implementations must embed UnimplementedBluePandaServer
// for forward compatibility
type BluePandaServer interface {
	NextRowID(context.Context, *NextRowIDRequest) (*NextRowIDResult, error)
	Store(context.Context, *StoreRequest) (*StoreResult, error)
	Get(context.Context, *GetRequest) (*GetResult, error)
	Fetch(*FetchRequest, BluePanda_FetchServer) error
	Insert(context.Context, *InsertRequest) (*InsertResult, error)
	mustEmbedUnimplementedBluePandaServer()
}

// UnimplementedBluePandaServer must be embedded to have forward compatible implementations.
type UnimplementedBluePandaServer struct {
}

func (UnimplementedBluePandaServer) NextRowID(context.Context, *NextRowIDRequest) (*NextRowIDResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextRowID not implemented")
}
func (UnimplementedBluePandaServer) Store(context.Context, *StoreRequest) (*StoreResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Store not implemented")
}
func (UnimplementedBluePandaServer) Get(context.Context, *GetRequest) (*GetResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedBluePandaServer) Fetch(*FetchRequest, BluePanda_FetchServer) error {
	return status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (UnimplementedBluePandaServer) Insert(context.Context, *InsertRequest) (*InsertResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (UnimplementedBluePandaServer) mustEmbedUnimplementedBluePandaServer() {}

// UnsafeBluePandaServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BluePandaServer will
// result in compilation errors.
type UnsafeBluePandaServer interface {
	mustEmbedUnimplementedBluePandaServer()
}

func RegisterBluePandaServer(s grpc.ServiceRegistrar, srv BluePandaServer) {
	s.RegisterService(&BluePanda_ServiceDesc, srv)
}

func _BluePanda_NextRowID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NextRowIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluePandaServer).NextRowID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluePanda_NextRowID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluePandaServer).NextRowID(ctx, req.(*NextRowIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluePanda_Store_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoreRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluePandaServer).Store(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluePanda_Store_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluePandaServer).Store(ctx, req.(*StoreRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluePanda_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluePandaServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluePanda_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluePandaServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BluePanda_Fetch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BluePandaServer).Fetch(m, &bluePandaFetchServer{stream})
}

type BluePanda_FetchServer interface {
	Send(*FetchResult) error
	grpc.ServerStream
}

type bluePandaFetchServer struct {
	grpc.ServerStream
}

func (x *bluePandaFetchServer) Send(m *FetchResult) error {
	return x.ServerStream.SendMsg(m)
}

func _BluePanda_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BluePandaServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BluePanda_Insert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BluePandaServer).Insert(ctx, req.(*InsertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BluePanda_ServiceDesc is the grpc.ServiceDesc for BluePanda service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BluePanda_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bluepanda.BluePanda",
	HandlerType: (*BluePandaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NextRowID",
			Handler:    _BluePanda_NextRowID_Handler,
		},
		{
			MethodName: "Store",
			Handler:    _BluePanda_Store_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _BluePanda_Get_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _BluePanda_Insert_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Fetch",
			Handler:       _BluePanda_Fetch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "service.proto",
}
